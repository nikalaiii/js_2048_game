{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ const $a5fd07fa01589658$var$table = document.querySelector(\".game-field\");\nconst $a5fd07fa01589658$var$tBody = $a5fd07fa01589658$var$table.querySelector(\"tbody\");\nconst $a5fd07fa01589658$var$rows = $a5fd07fa01589658$var$tBody.querySelectorAll(\"tr\");\nconst $a5fd07fa01589658$var$startButton = document.querySelector(\".start\");\nconst $a5fd07fa01589658$var$gameScore = document.querySelector(\".game-score\");\nconst $a5fd07fa01589658$var$restartButton = document.querySelector(\".restart\");\nconst $a5fd07fa01589658$var$startMessage = document.querySelector(\".message-start\");\nconst $a5fd07fa01589658$var$loseMessage = document.querySelector(\".message-lose\");\nconst $a5fd07fa01589658$var$winMessage = document.querySelector(\".message-win\");\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = []){\n        this.state = initialState;\n        this.score = 0;\n        this.status = \"start\";\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    getScore() {\n        $a5fd07fa01589658$var$gameScore.textContent = this.score;\n        return this.score;\n    }\n    resetBoard() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++)this.state[i][j] = 0;\n        this.score = 0;\n    }\n    start() {\n        this.status = \"inProcess\";\n        this.resetBoard();\n        this.spawnCell();\n        this.spawnCell();\n        this.changeBoard();\n        document.removeEventListener(\"keydown\", this.handleKeyPress);\n        document.addEventListener(\"keydown\", this.handleKeyPress);\n        $a5fd07fa01589658$var$startButton.className = \"button restart\";\n        $a5fd07fa01589658$var$startButton.textContent = \"Restart\";\n        $a5fd07fa01589658$var$startMessage.remove();\n        $a5fd07fa01589658$var$winMessage.className = \"message message-win hidden\";\n        $a5fd07fa01589658$var$loseMessage.className = \"message message-min hidden\";\n    }\n    restart() {\n        $a5fd07fa01589658$var$restartButton.removeEventListener(\"click\", this.handleRestart);\n        this.handleRestart = ()=>{\n            this.resetBoard();\n            this.status = \"start\";\n            $a5fd07fa01589658$var$winMessage.classList.add(\"hidden\");\n            $a5fd07fa01589658$var$loseMessage.classList.add(\"hidden\");\n            this.start();\n        };\n        $a5fd07fa01589658$var$restartButton.addEventListener(\"click\", this.handleRestart);\n    }\n    isGameWin() {\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.state[i][j] === 2048) {\n                this.status = \"win\";\n                $a5fd07fa01589658$var$winMessage.className = \"message message-win\";\n            }\n        }\n    }\n    isGameOver() {\n        let ansver = true;\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            if (this.state[i][j] === 0) ansver = false;\n            if (i < 3 && this.state[i][j] === this.state[i + 1][j] || j < 3 && this.state[i][j] === this.state[i][j + 1]) ansver = false;\n        }\n        if (ansver === true) {\n            this.status = \"lose\";\n            $a5fd07fa01589658$var$loseMessage.className = \"message message-lose\";\n        }\n    }\n    handleKeyPress(e) {\n        if (this.status === \"inProcess\") switch(e.key){\n            case \"ArrowUp\":\n                this.moveUp();\n                break;\n            case \"ArrowDown\":\n                this.moveDown();\n                break;\n            case \"ArrowLeft\":\n                this.moveLeft();\n                break;\n            case \"ArrowRight\":\n                this.moveRight();\n                break;\n        }\n    }\n    moveDown() {\n        const previousState = JSON.stringify(this.state);\n        const newState = [\n            0,\n            1,\n            2,\n            3\n        ].map((col)=>{\n            const column = this.state.map((row)=>row[col]).filter((cell)=>cell !== 0);\n            for(let i = column.length - 1; i > 0; i--)if (column[i] === column[i - 1]) {\n                column[i] *= 2;\n                column[i - 1] = 0;\n                this.score += column[i];\n            }\n            const compressed = column.filter((cell)=>cell !== 0);\n            return [\n                ...Array(4 - compressed.length).fill(0),\n                ...compressed\n            ];\n        });\n        this.state = [\n            0,\n            1,\n            2,\n            3\n        ].map((row)=>newState.map((col)=>col[row]));\n        if (JSON.stringify(this.state) !== previousState) this.spawnCell();\n        this.changeBoard();\n        this.isGameWin();\n        this.isGameOver();\n        this.getScore();\n    }\n    moveLeft() {\n        const previousState = JSON.stringify(this.state);\n        const newState = this.state.map((row)=>{\n            const filtered = row.filter((cell)=>cell !== 0);\n            for(let i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1]) {\n                filtered[i] *= 2;\n                filtered[i + 1] = 0;\n                this.score += filtered[i];\n            }\n            const compressed = filtered.filter((cell)=>cell !== 0);\n            return [\n                ...compressed,\n                ...Array(4 - compressed.length).fill(0)\n            ];\n        });\n        this.state = newState;\n        if (JSON.stringify(this.state) !== previousState) this.spawnCell();\n        this.changeBoard();\n        this.isGameWin();\n        this.isGameOver();\n        this.getScore();\n    }\n    moveRight() {\n        const previousState = JSON.stringify(this.state);\n        const newState = this.state.map((row, rowIndex)=>{\n            const reversed = [\n                ...row\n            ].reverse();\n            const filtered = reversed.filter((cell)=>cell !== 0);\n            const merged = Array(4).fill(false);\n            for(let i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1] && !merged[i] && !merged[i + 1]) {\n                filtered[i] *= 2;\n                filtered[i + 1] = 0;\n                merged[i] = true;\n                this.score += filtered[i];\n            }\n            const compressed = filtered.filter((cell)=>cell !== 0);\n            const result = [\n                ...compressed,\n                ...Array(4 - compressed.length).fill(0)\n            ].reverse();\n            return result;\n        });\n        this.state = newState;\n        if (JSON.stringify(this.state) !== previousState) this.spawnCell();\n        this.changeBoard();\n        this.isGameWin();\n        this.isGameOver();\n        this.getScore();\n    }\n    moveUp() {\n        const previousState = JSON.stringify(this.state);\n        const newState = [\n            0,\n            1,\n            2,\n            3\n        ].map((col)=>{\n            const column = this.state.map((row)=>row[col]).filter((cell)=>cell !== 0);\n            for(let i = 0; i < column.length - 1; i++)if (column[i] === column[i + 1]) {\n                column[i] *= 2;\n                column[i + 1] = 0;\n                this.score += column[i];\n            }\n            const compressed = column.filter((cell)=>cell !== 0);\n            return [\n                ...compressed,\n                ...Array(4 - compressed.length).fill(0)\n            ];\n        });\n        this.state = [\n            0,\n            1,\n            2,\n            3\n        ].map((row)=>newState.map((col)=>col[row]));\n        if (JSON.stringify(this.state) !== previousState) this.spawnCell();\n        this.changeBoard();\n        this.isGameWin();\n        this.isGameOver();\n        this.getScore();\n    }\n    spawnCell() {\n        const nullCells = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.state[i][j] === 0) nullCells.push({\n                x: i,\n                y: j\n            });\n        }\n        if (nullCells.length !== 0) {\n            const randomCell = Math.floor(Math.random() * nullCells.length);\n            const { x: x, y: y } = nullCells[randomCell];\n            this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    changeBoard() {\n        for(let row = 0; row < $a5fd07fa01589658$var$rows.length; row++){\n            const rowCells = $a5fd07fa01589658$var$rows[row].querySelectorAll(\"td\");\n            for(let i = 0; i < rowCells.length; i++){\n                const value = this.state[row][i];\n                if (value !== 0) {\n                    rowCells[i].textContent = value;\n                    rowCells[i].className = `field-cell field-cell--${value}`;\n                } else {\n                    rowCells[i].textContent = \"\";\n                    rowCells[i].className = \"field-cell\";\n                }\n            }\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$board = [\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n];\ndocument.addEventListener(\"DOMContentLoaded\", ()=>{\n    const game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))($09e991522ca7e64e$var$board);\n    const startButton = document.querySelector(\".start\");\n    startButton.addEventListener(\"click\", ()=>{\n        game.start();\n    });\n});\n\n\n//# sourceMappingURL=index.3d403cd4.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\n\n// Write your code here\n\nimport Game from '../modules/Game.class';\n\nconst board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game(board);\n\n  const startButton = document.querySelector('.start');\n\n  startButton.addEventListener('click', () => {\n    game.start();\n  });\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\nconst table = document.querySelector('.game-field');\nconst tBody = table.querySelector('tbody');\nconst rows = tBody.querySelectorAll('tr');\nconst startButton = document.querySelector('.start');\nconst gameScore = document.querySelector('.game-score');\nconst restartButton = document.querySelector('.restart');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nclass Game {\n  constructor(initialState = []) {\n    this.state = initialState;\n    this.score = 0;\n    this.status = 'start';\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  getScore() {\n    gameScore.textContent = this.score;\n\n    return this.score;\n  }\n\n  resetBoard() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.state[i][j] = 0;\n      }\n    }\n    this.score = 0;\n  }\n\n  start() {\n    this.status = 'inProcess';\n    this.resetBoard();\n    this.spawnCell();\n    this.spawnCell();\n    this.changeBoard();\n    document.removeEventListener('keydown', this.handleKeyPress);\n    document.addEventListener('keydown', this.handleKeyPress);\n    startButton.className = 'button restart';\n    startButton.textContent = 'Restart';\n    startMessage.remove();\n    winMessage.className = 'message message-win hidden';\n    loseMessage.className = 'message message-min hidden';\n  }\n\n  restart() {\n    restartButton.removeEventListener('click', this.handleRestart);\n\n    this.handleRestart = () => {\n      this.resetBoard();\n      this.status = 'start';\n      winMessage.classList.add('hidden');\n      loseMessage.classList.add('hidden');\n      this.start();\n    };\n    restartButton.addEventListener('click', this.handleRestart);\n  }\n\n  isGameWin() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 2048) {\n          this.status = 'win';\n          winMessage.className = 'message message-win';\n        }\n      }\n    }\n  }\n\n  isGameOver() {\n    let ansver = true;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          ansver = false;\n        }\n\n        if (\n          (i < 3 && this.state[i][j] === this.state[i + 1][j]) ||\n          (j < 3 && this.state[i][j] === this.state[i][j + 1])\n        ) {\n          ansver = false;\n        }\n      }\n    }\n\n    if (ansver === true) {\n      this.status = 'lose';\n      loseMessage.className = 'message message-lose';\n    }\n  }\n\n  handleKeyPress(e) {\n    if (this.status === 'inProcess') {\n      switch (e.key) {\n        case 'ArrowUp':\n          this.moveUp();\n          break;\n        case 'ArrowDown':\n          this.moveDown();\n          break;\n        case 'ArrowLeft':\n          this.moveLeft();\n          break;\n        case 'ArrowRight':\n          this.moveRight();\n          break;\n      }\n    }\n  }\n\n  moveDown() {\n    const previousState = JSON.stringify(this.state);\n\n    const newState = [0, 1, 2, 3].map((col) => {\n      const column = this.state\n        .map((row) => row[col])\n        .filter((cell) => cell !== 0);\n\n      for (let i = column.length - 1; i > 0; i--) {\n        if (column[i] === column[i - 1]) {\n          column[i] *= 2;\n          column[i - 1] = 0;\n          this.score += column[i];\n        }\n      }\n\n      const compressed = column.filter((cell) => cell !== 0);\n\n      return [...Array(4 - compressed.length).fill(0), ...compressed];\n    });\n\n    this.state = [0, 1, 2, 3].map((row) => newState.map((col) => col[row]));\n\n    if (JSON.stringify(this.state) !== previousState) {\n      this.spawnCell();\n    }\n    this.changeBoard();\n    this.isGameWin();\n    this.isGameOver();\n    this.getScore();\n  }\n\n  moveLeft() {\n    const previousState = JSON.stringify(this.state);\n\n    const newState = this.state.map((row) => {\n      const filtered = row.filter((cell) => cell !== 0);\n\n      for (let i = 0; i < filtered.length - 1; i++) {\n        if (filtered[i] === filtered[i + 1]) {\n          filtered[i] *= 2;\n          filtered[i + 1] = 0;\n          this.score += filtered[i];\n        }\n      }\n\n      const compressed = filtered.filter((cell) => cell !== 0);\n\n      return [...compressed, ...Array(4 - compressed.length).fill(0)];\n    });\n\n    this.state = newState;\n\n    if (JSON.stringify(this.state) !== previousState) {\n      this.spawnCell();\n    }\n    this.changeBoard();\n    this.isGameWin();\n    this.isGameOver();\n    this.getScore();\n  }\n\n  moveRight() {\n    const previousState = JSON.stringify(this.state);\n    const newState = this.state.map((row, rowIndex) => {\n      const reversed = [...row].reverse();\n\n      const filtered = reversed.filter((cell) => cell !== 0);\n\n      const merged = Array(4).fill(false);\n\n      for (let i = 0; i < filtered.length - 1; i++) {\n        if (filtered[i] === filtered[i + 1] && !merged[i] && !merged[i + 1]) {\n          filtered[i] *= 2;\n          filtered[i + 1] = 0;\n          merged[i] = true;\n          this.score += filtered[i];\n        }\n      }\n\n      const compressed = filtered.filter((cell) => cell !== 0);\n\n      const result = [\n        ...compressed,\n        ...Array(4 - compressed.length).fill(0),\n      ].reverse();\n\n      return result;\n    });\n\n    this.state = newState;\n\n    if (JSON.stringify(this.state) !== previousState) {\n      this.spawnCell();\n    } else {\n    }\n\n    this.changeBoard();\n    this.isGameWin();\n    this.isGameOver();\n    this.getScore();\n  }\n\n  moveUp() {\n    const previousState = JSON.stringify(this.state);\n\n    const newState = [0, 1, 2, 3].map((col) => {\n      const column = this.state\n        .map((row) => row[col])\n        .filter((cell) => cell !== 0);\n\n      for (let i = 0; i < column.length - 1; i++) {\n        if (column[i] === column[i + 1]) {\n          column[i] *= 2;\n          column[i + 1] = 0;\n          this.score += column[i];\n        }\n      }\n\n      const compressed = column.filter((cell) => cell !== 0);\n\n      return [...compressed, ...Array(4 - compressed.length).fill(0)];\n    });\n\n    this.state = [0, 1, 2, 3].map((row) => newState.map((col) => col[row]));\n\n    if (JSON.stringify(this.state) !== previousState) {\n      this.spawnCell();\n    }\n    this.changeBoard();\n    this.isGameWin();\n    this.isGameOver();\n    this.getScore();\n  }\n\n  spawnCell() {\n    const nullCells = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.state[i][j] === 0) {\n          nullCells.push({ x: i, y: j });\n        }\n      }\n    }\n\n    if (nullCells.length !== 0) {\n      const randomCell = Math.floor(Math.random() * nullCells.length);\n      const { x, y } = nullCells[randomCell];\n\n      this.state[x][y] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  changeBoard() {\n    for (let row = 0; row < rows.length; row++) {\n      const rowCells = rows[row].querySelectorAll('td');\n\n      for (let i = 0; i < rowCells.length; i++) {\n        const value = this.state[row][i];\n\n        if (value !== 0) {\n          rowCells[i].textContent = value;\n          rowCells[i].className = `field-cell field-cell--${value}`;\n        } else {\n          rowCells[i].textContent = '';\n          rowCells[i].className = 'field-cell';\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$rows","$a5fd07fa01589658$var$tBody","$a5fd07fa01589658$var$table","document","querySelector","querySelectorAll","$a5fd07fa01589658$var$startButton","$a5fd07fa01589658$var$gameScore","$a5fd07fa01589658$var$restartButton","$a5fd07fa01589658$var$startMessage","$a5fd07fa01589658$var$loseMessage","$a5fd07fa01589658$var$winMessage","constructor","initialState","state","score","status","handleKeyPress","bind","getState","getStatus","getScore","textContent","resetBoard","i","j","start","spawnCell","changeBoard","removeEventListener","addEventListener","className","remove","restart","handleRestart","classList","add","isGameWin","isGameOver","ansver","e","key","moveUp","moveDown","moveLeft","moveRight","previousState","JSON","stringify","newState","map","col","column","row","filter","cell","length","compressed","Array","fill","filtered","rowIndex","reversed","reverse","merged","nullCells","push","x","y","randomCell","Math","floor","random","rowCells","value","$09e991522ca7e64e$var$board","a","game","__esModule","default","startButton"],"version":3,"file":"index.3d403cd4.js.map"}